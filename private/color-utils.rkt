#lang typed/racket/base

(require "common.rkt"
         racket/math)

(provide hsb->rgb)

;; Given a color with hue H ∈ [0°, 360°), saturation S ∈ [0, 1],
;; and value V ∈ [0, 1], we first find chroma:
;;
;; C = V * S
;;
;; Then we can find a point (R1, G1, B1) along the bottom three faces of the RGB
;; cube, with the same hue and chroma as our color (using the intermediate value X
;; for the second largest component of this color):
;;
;;   H' = H / 60
;;   X  = C (1 - |H' mod 2 - 1|)
;;
;;   (R1, G1, B1) =
;;       (0, 0, 0) if H is undefined
;;       (C, X, 0) if 0 <= H' < 1
;;       (X, C, 0) if 1 <= H' < 2
;;       (0, C, X) if 2 <= H' < 3
;;       (0, X, C) if 3 <= H' < 4
;;       (X, 0, C) if 4 <= H' < 5
;;       (C, 0, X) if 5 <= H' < 6
;;
;; Finally, we can find R, G, and B by adding the same amount to each component, to match value:
;;
;;   m = V - C
;;   (R, G, B) = (R1 + m, G1 + m, B1 + m)

(: between? (-> Flonum Flonum Flonum Boolean))
(define (between? n min max)
  (and (<= min n) (< n max)))

; Transform a Flonum between 0 and 1 unto a byte? (exact between 0 and 255)
(: unit-to-byte (-> Flonum Byte))
(define (unit-to-byte v)
  (define r (exact-round (* 255 v)))
  (assert (and (<= 0 r) (<= r 255)))
  r)

(: hsb->rgb-unit (-> Flonum Flonum Flonum (Values Flonum Flonum Flonum)))
(define (hsb->rgb-unit h s b)
  (define C (* b s))
  (define h-prime (/ h 60))
  (define X (* C (- 1 (abs (- (float-modulo h-prime 2.0) 1.0)))))
  (define-values (r1 g1 b1)
    (cond
      [(between? h-prime 0.0 1.0) (values C X 0)]
      [(between? h-prime 1.0 2.0) (values X C 0)]
      [(between? h-prime 2.0 3.0) (values 0 C X)]
      [(between? h-prime 3.0 4.0) (values 0 X C)]
      [(between? h-prime 4.0 5.0) (values X 0 C)]
      [(between? h-prime 5.0 6.0) (values C 0 X)]
      [else                   (values 0 0 0)]))
  (define m (- b C))
  (values (+ r1 m) (+ g1 m) (+ b1 m)))

(: hsb->rgb (-> Flonum Flonum Flonum (Values Byte Byte Byte)))
(define (hsb->rgb h s b)
  (define-values (red green blue) (hsb->rgb-unit h s b))
  (values (unit-to-byte red)
          (unit-to-byte green)
          (unit-to-byte blue)))

(module+ test
  (require typed/rackunit
           racket/match)

  (define epsilon 1e-4)

  (define-type TestCase (Pairof (Vector Flonum Flonum Flonum) (Vector Flonum Flonum Flonum)))

  ; 100 test cases from another implementation we trust
  (: test-cases (Listof TestCase))
  (define test-cases (list [cons '#(254.3720 0.7544 0.7304 ) '#(0.3114 0.1794 0.7304)]
                           [cons '#(355.4050 0.3052 0.8316 ) '#(0.8316 0.5778 0.5972)]
                           [cons '#(297.7289 0.1966 0.8511 ) '#(0.8447 0.6838 0.8511)]
                           [cons '#(351.3183 0.8599 0.3964 ) '#(0.3964 0.0555 0.1049)]
                           [cons '#(17.9457 0.3858 0.3494  ) '#(0.3494 0.2549 0.2146)]
                           [cons '#(255.9670 0.5865 0.3545 ) '#(0.2019 0.1466 0.3545)]
                           [cons '#(99.1957 0.5264 0.3903  ) '#(0.2561 0.3903 0.1848)]
                           [cons '#(294.4697 0.5231 0.8816 ) '#(0.8391 0.4204 0.8816)]
                           [cons '#(349.9006 0.5699 0.6465 ) '#(0.6465 0.2781 0.3401)]
                           [cons '#(307.4147 0.6293 0.2600 ) '#(0.2600 0.0964 0.2398)]
                           [cons '#(268.3768 0.7621 0.6368 ) '#(0.3810 0.1515 0.6368)]
                           [cons '#(198.7372 0.7374 0.4133 ) '#(0.1085 0.3181 0.4133)]
                           [cons '#(287.5495 0.9934 0.4911 ) '#(0.3899 0.0033 0.4911)]
                           [cons '#(243.4537 0.8695 0.9601 ) '#(0.1734 0.1253 0.9601)]
                           [cons '#(178.1846 0.0479 0.7304 ) '#(0.6954 0.7304 0.7293)]
                           [cons '#(169.1115 0.9105 0.2739 ) '#(0.0245 0.2739 0.2286)]
                           [cons '#(126.9199 0.6045 0.1058 ) '#(0.0418 0.1058 0.0492)]
                           [cons '#(81.0453 0.4070 0.3148  ) '#(0.2699 0.3148 0.1867)]
                           [cons '#(17.2736 0.6135 0.8338  ) '#(0.8338 0.4695 0.3223)]
                           [cons '#(180.1839 0.0891 0.8858 ) '#(0.8069 0.8856 0.8858)]
                           [cons '#(32.6462 0.1372 0.9462  ) '#(0.9462 0.8870 0.8164)]
                           [cons '#(54.6247 0.3628 0.1321  ) '#(0.1321 0.1278 0.0842)]
                           [cons '#(202.9451 0.3848 0.4457 ) '#(0.2742 0.3801 0.4457)]
                           [cons '#(199.1137 0.8031 0.4697 ) '#(0.0925 0.3496 0.4697)]
                           [cons '#(163.8738 0.7066 0.4699 ) '#(0.1379 0.4699 0.3807)]
                           [cons '#(162.0612 0.3344 0.7706 ) '#(0.5129 0.7706 0.6935)]
                           [cons '#(282.8761 0.8456 0.2303 ) '#(0.1748 0.0356 0.2303)]
                           [cons '#(38.0567 0.4105 0.4308  ) '#(0.4308 0.3661 0.2539)]
                           [cons '#(186.5169 0.2085 0.9435 ) '#(0.7467 0.9221 0.9435)]
                           [cons '#(356.2651 0.6141 0.8762 ) '#(0.8762 0.3382 0.3717)]
                           [cons '#(355.1135 0.9743 0.4810 ) '#(0.4810 0.0124 0.0505)]
                           [cons '#(208.9970 0.8510 0.8317 ) '#(0.1239 0.4896 0.8317)]
                           [cons '#(173.3448 0.6333 0.4350 ) '#(0.1595 0.4350 0.4044)]
                           [cons '#(237.9651 0.8944 0.4056 ) '#(0.0428 0.0551 0.4056)]
                           [cons '#(234.9228 0.9535 0.6995 ) '#(0.0326 0.0890 0.6995)]
                           [cons '#(44.5552 0.2139 0.1329  ) '#(0.1329 0.1256 0.1045)]
                           [cons '#(324.1749 0.9824 0.2264 ) '#(0.2264 0.0040 0.1368)]
                           [cons '#(45.7308 0.8964 0.1151  ) '#(0.1151 0.0906 0.0119)]
                           [cons '#(67.9325 0.5980 0.0448  ) '#(0.0413 0.0448 0.0180)]
                           [cons '#(290.7262 0.7306 0.8035 ) '#(0.7127 0.2165 0.8035)]
                           [cons '#(201.1803 0.2367 0.5098 ) '#(0.3892 0.4672 0.5098)]
                           [cons '#(263.9890 0.8548 0.8923 ) '#(0.4345 0.1296 0.8923)]
                           [cons '#(329.0647 0.3311 0.0810 ) '#(0.0810 0.0542 0.0680)]
                           [cons '#(222.8694 0.1550 0.4322 ) '#(0.3652 0.3844 0.4322)]
                           [cons '#(54.1969 0.9444 0.5920  ) '#(0.5920 0.5380 0.0329)]
                           [cons '#(346.3070 0.3266 0.7670 ) '#(0.7670 0.5165 0.5736)]
                           [cons '#(171.1462 0.8696 0.4106 ) '#(0.0535 0.4106 0.3579)]
                           [cons '#(323.3069 0.2129 0.7679 ) '#(0.7679 0.6044 0.7044)]
                           [cons '#(290.1143 0.3992 0.6872 ) '#(0.6420 0.4129 0.6872)]
                           [cons '#(264.6014 0.5765 0.9825 ) '#(0.6484 0.4161 0.9825)]
                           [cons '#(311.5087 0.2993 0.2815 ) '#(0.2815 0.1972 0.2653)]
                           [cons '#(312.6044 0.7665 0.0576 ) '#(0.0576 0.0135 0.0484)]
                           [cons '#(64.5329 0.6795 0.0760  ) '#(0.0721 0.0760 0.0244)]
                           [cons '#(270.2413 0.8003 0.3802 ) '#(0.2293 0.0759 0.3802)]
                           [cons '#(66.5612 0.5505 0.2526  ) '#(0.2374 0.2526 0.1135)]
                           [cons '#(18.0680 0.6013 0.4249  ) '#(0.4249 0.2464 0.1694)]
                           [cons '#(70.0361 0.7367 0.4641  ) '#(0.4069 0.4641 0.1222)]
                           [cons '#(155.5225 0.2061 0.9629 ) '#(0.7645 0.9629 0.8819)]
                           [cons '#(49.2531 0.8130 0.0583  ) '#(0.0583 0.0498 0.0109)]
                           [cons '#(79.4265 0.3073 0.5022  ) '#(0.4523 0.5022 0.3479)]
                           [cons '#(193.1236 0.9648 0.7549 ) '#(0.0266 0.5956 0.7549)]
                           [cons '#(180.0779 0.3865 0.1853 ) '#(0.1137 0.1852 0.1853)]
                           [cons '#(279.2663 0.1795 0.8186 ) '#(0.7678 0.6716 0.8186)]
                           [cons '#(312.6482 0.8113 0.6877 ) '#(0.6877 0.1297 0.5700)]
                           [cons '#(286.9041 0.1362 0.3018 ) '#(0.2929 0.2607 0.3018)]
                           [cons '#(289.1869 0.8881 0.8451 ) '#(0.7098 0.0946 0.8451)]
                           [cons '#(56.1858 0.4416 0.9688  ) '#(0.9688 0.9416 0.5410)]
                           [cons '#(23.6360 0.7530 0.0528  ) '#(0.0528 0.0287 0.0131)]
                           [cons '#(317.1925 0.1118 0.6439 ) '#(0.6439 0.5719 0.6233)]
                           [cons '#(40.4696 0.5217 0.5221  ) '#(0.5221 0.4334 0.2497)]
                           [cons '#(153.1307 0.1635 0.7323 ) '#(0.6126 0.7323 0.6787)]
                           [cons '#(309.9559 0.4561 0.5138 ) '#(0.5138 0.2794 0.4749)]
                           [cons '#(162.2244 0.4591 0.3280 ) '#(0.1774 0.3280 0.2833)]
                           [cons '#(283.2638 0.5523 0.3543 ) '#(0.2998 0.1587 0.3543)]
                           [cons '#(265.9058 0.3394 0.9616 ) '#(0.7762 0.6352 0.9616)]
                           [cons '#(40.9184 0.8089 0.8304  ) '#(0.8304 0.6168 0.1587)]
                           [cons '#(96.5609 0.7575 0.8497  ) '#(0.4575 0.8497 0.2061)]
                           [cons '#(147.7786 0.2940 0.4826 ) '#(0.3407 0.4826 0.4064)]
                           [cons '#(267.3963 0.8616 0.6842 ) '#(0.3639 0.0947 0.6842)]
                           [cons '#(260.7978 0.2258 0.5218 ) '#(0.4448 0.4040 0.5218)]
                           [cons '#(55.8082 0.1874 0.0705  ) '#(0.0705 0.0696 0.0573)]
                           [cons '#(311.7743 0.4166 0.6514 ) '#(0.6514 0.3800 0.5981)]
                           [cons '#(176.8577 0.2624 0.2596 ) '#(0.1915 0.2596 0.2560)]
                           [cons '#(229.0838 0.0801 0.1925 ) '#(0.1771 0.1799 0.1925)]
                           [cons '#(180.2410 0.7241 0.2723 ) '#(0.0751 0.2715 0.2723)]
                           [cons '#(133.3136 0.9236 0.3176 ) '#(0.0243 0.3176 0.0893)]
                           [cons '#(34.7836 0.2252 0.2312  ) '#(0.2312 0.2093 0.1792)]
                           [cons '#(252.3792 0.1790 0.4660 ) '#(0.3998 0.3826 0.4660)]
                           [cons '#(279.5019 0.1488 0.2879 ) '#(0.2733 0.2451 0.2879)]
                           [cons '#(43.1537 0.4273 0.6932  ) '#(0.6932 0.6101 0.3970)]
                           [cons '#(145.4751 0.5815 0.3018 ) '#(0.1263 0.3018 0.2008)]
                           [cons '#(331.9154 0.1574 0.1120 ) '#(0.1120 0.0944 0.1027)]
                           [cons '#(303.4509 0.3904 0.7415 ) '#(0.7415 0.4521 0.7249)]
                           [cons '#(333.7666 0.1106 0.6834 ) '#(0.6834 0.6078 0.6409)]
                           [cons '#(17.7691 0.7943 0.6973  ) '#(0.6973 0.3074 0.1434)]
                           [cons '#(112.1732 0.1662 0.0072 ) '#(0.0061 0.0072 0.0060)]
                           [cons '#(99.8339 0.2286 0.7035  ) '#(0.5967 0.7035 0.5427)]
                           [cons '#(296.9972 0.8921 0.8222 ) '#(0.7855 0.0888 0.8222)]
                           [cons '#(321.0898 0.6016 0.7588 ) '#(0.7588 0.3023 0.5983)]
                           [cons '#(128.6645 0.7727 0.7891 ) '#(0.1794 0.7891 0.2674)]))

  (for ([test-case test-cases]
        [n (in-naturals)])

    (match-define (vector input-h input-s input-b) (car test-case))
    (match-define (vector expected-r expected-g expected-b) (cdr test-case))
    (define-values (result-r result-g result-b) (hsb->rgb-unit input-h input-s input-b))

    (check-= expected-r result-r epsilon (format "red should match for test case #~a" n))
    (check-= expected-g result-g epsilon (format "green should match for test case #~a" n))
    (check-= expected-b result-b epsilon (format "blue should match for test case #~a" n))))
